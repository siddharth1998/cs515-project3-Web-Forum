{
	"info": {
		"_postman_id": "09bd56c9-06db-4529-8ef2-d7edc6e9ed8c",
		"name": "Python Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12623814",
		"_collection_link": "https://bold-flare-578532.postman.co/workspace/My-Workspace~9060e8d7-ac65-4088-8a83-20315127e5a9/collection/12623814-09bd56c9-06db-4529-8ef2-d7edc6e9ed8c?action=share&creator=12623814&source=collection_link"
	},
	"item": [
		{
			"name": "User - POST - Create user - Test #1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User: Username length is lesser than 5 characters\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Create user - Test #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User: username can only have - letters, digits, underscore, . or -\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john-$\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Create user - Test #3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User: creates a user record\", function () {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.key).to.be.a(\"string\");",
							"    pm.expect(jsonData.username).to.be.a(\"string\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"userKey\", jsonData.key);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john-jr\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Create user - Test #3.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User: creates a user record\", function () {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.key).to.be.a(\"string\");",
							"    pm.expect(jsonData.username).to.be.a(\"string\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"userId2\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"coder-sam\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Create user - Test #4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User: username already in use\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john-jr\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Create user - Test #5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User: Incorrect content type\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john-doe\"\n}",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User: Update the user metadata based on a key\", function () {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.message).to.be.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"{{userKey}}\",\n    \"firstName\": \"john d\",\n    \"lastName\": \"senior\",\n    \"username\": \"john-senior\",\n    \"id\": \"this_should_not_get_in_db\",\n    \"eas\": \"this-should-not-get-in-db\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #1.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User: username is already in use, please use different one\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"{{userKey}}\",\n    \"firstName\": \"john d\",\n    \"lastName\": \"senior\",\n    \"username\": \"coder-sam\",\n    \"id\": \"this_should_not_get_in_db\",\n    \"eas\": \"this-should-not-get-in-db\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User: User key is required\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"john d\",\n    \"lastName\": \"senior\",\n    \"username\": \"john-senior\",\n    \"id\": \"this_should_not_get_in_db\",\n    \"eas\": \"this-should-not-get-in-db\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User: User key is invalid\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"{{userKey}}112\",\n    \"firstName\": \"john d\",\n    \"lastName\": \"senior\",\n    \"username\": \"john-senior\",\n    \"id\": \"this_should_not_get_in_db\",\n    \"eas\": \"this-should-not-get-in-db\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User: Username needs a minimum length of 5 to 30 characters\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"140969aecf6cbaa638321b4a\",\n    \"firstName\": \"john d\",\n    \"lastName\": \"senior\",\n    \"username\": \"john\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User: username can have only letters, digits, underscore, . or - characters\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"140969aecf6cbaa638321b4a\",\n    \"firstName\": \"john d\",\n    \"lastName\": \"senior\",\n    \"username\": \"john(\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User: firstName needs to be between the length of 5 to 30 characters\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"140969aecf6cbaa638321b4a\",\n    \"firstName\": \"j\",\n    \"lastName\": \"senior\",\n    \"username\": \"john-jr\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User: firstName can have only letters, digits, underscore, . or - characters\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"140969aecf6cbaa638321b4a\",\n    \"firstName\": \"john d*\",\n    \"lastName\": \"senior\",\n    \"username\": \"john-jr\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User: lastName needs to be between the length of 5 to 30 characters\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"140969aecf6cbaa638321b4a\",\n    \"firstName\": \"john d\",\n    \"lastName\": \"s\",\n    \"username\": \"john-jr\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User: lastName can have only letters, digits, underscore, . or - characters\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"140969aecf6cbaa638321b4a\",\n    \"firstName\": \"john d\",\n    \"lastName\": \"senior%\",\n    \"username\": \"john-jr\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - PUT - Update user - Test #10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User: User does not exist with the given key\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"140969aecf6cbaa638321b4a\",\n    \"firstName\": \"john d\",\n    \"lastName\": \"senior\",\n    \"username\": \"john-jr\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:5000/user",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Search user by key - Test #1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: Search user by key\", function () {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.key).to.be.a(\"string\");",
							"    pm.expect(jsonData.username).to.be.a(\"string\");",
							"    pm.expect(jsonData.firstName).to.be.a(\"string\");",
							"    pm.expect(jsonData.lastName).to.be.a(\"string\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"userId\", jsonData.id);",
							"pm.environment.set(\"userFirstName\", jsonData.firstName);",
							"pm.environment.set(\"userLastName\", jsonData.lastName);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"{{userKey}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/user/search",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"user",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Search user by Id - Test #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: Search user by id\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.key).to.be.a(\"string\");",
							"    pm.expect(jsonData.username).to.be.a(\"string\");",
							"    pm.expect(jsonData.firstName).to.be.a(\"string\");",
							"    pm.expect(jsonData.lastName).to.be.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{userId}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/user/search",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"user",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Search user by 2 non-unique attributes - Test #3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: Search user by first and lastname\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{userFirstName}}\",\n    \"lastName\": \"{{userLastName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/user/search",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"user",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Search user by 1 non-unique attributes - Test #4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: Search user by firstname\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{userFirstName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/user/search",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"user",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - Delete User - Test #6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: Delete a user\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/user/{{userId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - Delete User - Test #7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: Delete a user\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/user/{{userId2}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"user",
						"{{userId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User - POST - Search non existent user - Test #5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: User does not exist\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"not exist\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/user/search",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"user",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts - POST - Search by date range - Test #1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: date is not of valid format\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"startDatetime\": \"not exist\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/post/date-range",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"post",
						"date-range"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts - POST - Search by date range - Test #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: date is not of valid format\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"startDatetime\": \"2023-05-01T05:00:12.649Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/post/date-range",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"post",
						"date-range"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts - POST - Search by date range - Test #3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: date is not of valid format\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"endDatetime\": \"2023-04-28T06:11:38.001Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/post/date-range",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"post",
						"date-range"
					]
				}
			},
			"response": []
		},
		{
			"name": "Posts - POST - Search by date range - Test #4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search User: date is not of valid format\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"startDatetime\": \"2023-04-20T06:11:38.001Z\",\n    \"endDatetime\": \"2023-04-28T06:11:38.001Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/post/date-range",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"post",
						"date-range"
					]
				}
			},
			"response": []
		}
	]
}